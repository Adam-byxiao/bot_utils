#!/usr/bin/env python3
"""
ËøúÁ®ãËØ≠Èü≥‰ª£ÁêÜÁõëÊéßÂô®‰ΩøÁî®Á§∫‰æã

Ëøô‰∏™ËÑöÊú¨ÊºîÁ§∫Â¶Ç‰Ωï‰ΩøÁî®ËøúÁ®ãËØ≠Èü≥‰ª£ÁêÜÁõëÊéßÂô®Êù•Ëé∑ÂèñÂíåËß£ÊûêËØ≠Èü≥‰ª£ÁêÜÊï∞ÊçÆ„ÄÇ

‰ΩøÁî®ÂâçËØ∑Á°Æ‰øùÔºö
1. Â∑≤Âª∫Á´ã SSH Á´ØÂè£ËΩ¨Âèë: ssh root@device_ip -L 9222:localhost:9222
2. Chrome Â∑≤ÂêØÂä®Ë∞ÉËØïÊ®°Âºè: chrome --remote-debugging-port=9222
3. Â∑≤Âú® chrome://inspect ‰∏≠ÊâìÂºÄ Bot Controller ÁöÑ DevTools
"""

import asyncio
import os
import sys
from datetime import datetime

# Ê∑ªÂä†ÂΩìÂâçÁõÆÂΩïÂà∞ Python Ë∑ØÂæÑ
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from remote_voice_agent_monitor import RemoteVoiceAgentMonitor


async def main():
    """‰∏ªÂáΩÊï∞ÔºöÊºîÁ§∫ÂÆåÊï¥ÁöÑÁõëÊéßÊµÅÁ®ã"""
    
    print("=" * 60)
    print("ËøúÁ®ãËØ≠Èü≥‰ª£ÁêÜÁõëÊéßÂô® - ‰ΩøÁî®Á§∫‰æã")
    print("=" * 60)
    
    # ÈÖçÁΩÆÂèÇÊï∞
    chrome_host = "localhost"
    chrome_port = 9222
    output_dir = "voice_output"
    
    print(f"ÈÖçÁΩÆ‰ø°ÊÅØ:")
    print(f"  Chrome ‰∏ªÊú∫: {chrome_host}")
    print(f"  Chrome Á´ØÂè£: {chrome_port}")
    print(f"  ËæìÂá∫ÁõÆÂΩï: {output_dir}")
    print()
    
    # ÂàõÂª∫ÁõëÊéßÂô®ÂÆû‰æã
    monitor = RemoteVoiceAgentMonitor(
        chrome_host=chrome_host,
        chrome_port=chrome_port,
        output_dir=output_dir
    )
    
    try:
        print("ÂºÄÂßãÁõëÊéßÊµÅÁ®ã...")
        print("-" * 40)
        
        # Ê≠•È™§1: ËøûÊé•Âà∞ËøúÁ®ãËÆæÂ§á
        print("1. ËøûÊé•Âà∞ËøúÁ®ãËÆæÂ§á...")
        connected = await monitor.connect_to_remote_device()
        if not connected:
            print("‚ùå ËøûÊé•Â§±Ë¥•ÔºÅ")
            print("\nËØ∑Ê£ÄÊü•Ôºö")
            print("  - SSH Á´ØÂè£ËΩ¨ÂèëÊòØÂê¶Ê≠£Â∏∏")
            print("  - Chrome ÊòØÂê¶‰ª•Ë∞ÉËØïÊ®°ÂºèÂêØÂä®")
            print("  - Á´ØÂè£ 9222 ÊòØÂê¶ÂèØËÆøÈóÆ")
            return False
        print("‚úÖ ËøûÊé•ÊàêÂäüÔºÅ")
        
        # Ê≠•È™§2: Ê£ÄÊü•ËØ≠Èü≥‰ª£ÁêÜÂèØÁî®ÊÄß
        print("\n2. Ê£ÄÊü•ËØ≠Èü≥‰ª£ÁêÜÂèØÁî®ÊÄß...")
        available = await monitor.check_realtime_voice_agent()
        if not available:
            print("‚ùå ËØ≠Èü≥‰ª£ÁêÜ‰∏çÂèØÁî®ÔºÅ")
            print("\nËØ∑Ê£ÄÊü•Ôºö")
            print("  - ÊòØÂê¶Âú®Ê≠£Á°ÆÁöÑÈ°µÈù¢ÔºàBot ControllerÔºâ")
            print("  - realtimeVoiceAgent ÊòØÂê¶Â∑≤Âä†ËΩΩ")
            return False
        print("‚úÖ ËØ≠Èü≥‰ª£ÁêÜÂèØÁî®ÔºÅ")
        
        # Ê≠•È™§3: Ëé∑Âèñ‰ºöËØùÂéÜÂè≤
        print("\n3. Ëé∑Âèñ‰ºöËØùÂéÜÂè≤Êï∞ÊçÆ...")
        history_data = await monitor.get_session_history()
        if history_data is None:
            print("‚ùå Ëé∑ÂèñÂéÜÂè≤Êï∞ÊçÆÂ§±Ë¥•ÔºÅ")
            return False
        history_count = len(history_data) if isinstance(history_data, list) else 0
        print(f"‚úÖ ÊàêÂäüËé∑Âèñ {history_count} Êù°ÂéÜÂè≤ËÆ∞ÂΩïÔºÅ")
        
        # Ê≠•È™§4: Ëß£ÊûêÂíåÂàÜÁ±ªÊï∞ÊçÆ
        print("\n4. Ëß£ÊûêÂíåÂàÜÁ±ªÊï∞ÊçÆ...")
        input_messages, output_messages, session_summary = monitor.parse_and_classify_data(history_data)
        total_messages = len(input_messages) + len(output_messages)
        if total_messages == 0:
            print("‚úÖ Ëß£ÊûêÂÆåÊàê - Êó†ÊúâÊïàÊ∂àÊÅØÊï∞ÊçÆ")
        else:
            print(f"‚úÖ ÊàêÂäüËß£Êûê {total_messages} Êù°Ê∂àÊÅØÔºÅ")
        
        # Ê≠•È™§5: ÂØºÂá∫Êï∞ÊçÆ
        print("\n5. ÂØºÂá∫Êï∞ÊçÆÂà∞Êñá‰ª∂...")
        export_result = monitor.export_classified_data(input_messages, output_messages, session_summary)
        if not export_result:
            print("‚ùå Êï∞ÊçÆÂØºÂá∫Â§±Ë¥•ÔºÅ")
            return False
        print("‚úÖ Êï∞ÊçÆÂØºÂá∫ÊàêÂäüÔºÅ")
        
        # ÊòæÁ§∫ÂØºÂá∫ÁªìÊûú
        print("\n" + "=" * 40)
        print("ÂØºÂá∫ÁªìÊûú:")
        print("=" * 40)
        for key, value in export_result.items():
            if key.endswith('_file'):
                print(f"  {key}: {value}")
        
        # ÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ
        stats = monitor.exporter.get_export_statistics()
        print(f"\nÂØºÂá∫ÁªüËÆ°: {stats['total_files']} ‰∏™Êñá‰ª∂")
        
        print("\nüéâ ÁõëÊéßÂÆåÊàêÔºÅÊâÄÊúâÊï∞ÊçÆÂ∑≤ÊàêÂäüÂØºÂá∫„ÄÇ")
        return True
        
    except Exception as e:
        print(f"‚ùå ÁõëÊéßËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
        return False
        
    finally:
        # Á°Æ‰øùÊñ≠ÂºÄËøûÊé•
        try:
            await monitor.console_executor.disconnect()
            print("\nüîå Â∑≤Êñ≠ÂºÄËøûÊé•")
        except:
            pass


async def quick_monitoring():
    """Âø´ÈÄüÁõëÊéßÔºö‰ΩøÁî®‰∏ÄÈîÆÂºèÊñπÊ≥ï"""
    
    print("=" * 60)
    print("Âø´ÈÄüÁõëÊéßÊ®°Âºè")
    print("=" * 60)
    
    monitor = RemoteVoiceAgentMonitor(
        chrome_host="localhost",
        chrome_port=9222,
        output_dir="voice_output"
    )
    
    print("ÊâßË°å‰∏ÄÈîÆÂºèÁõëÊéß...")
    result = await monitor.run_complete_monitoring_cycle()
    success = result.get("success", False)
    
    if success:
        print("üéâ ÁõëÊéßÊàêÂäüÂÆåÊàêÔºÅ")
        
        # ÊòæÁ§∫ÂØºÂá∫ÁöÑÊñá‰ª∂
        stats = monitor.exporter.get_export_statistics()
        print(f"\nÂØºÂá∫‰∫Ü {stats['total_files']} ‰∏™Êñá‰ª∂:")
        for file_info in stats['files']:
            print(f"  - {file_info['name']} ({file_info['size']} bytes)")
    else:
        print("‚ùå ÁõëÊéßÂ§±Ë¥•")


def print_usage():
    """ÊâìÂç∞‰ΩøÁî®ËØ¥Êòé"""
    print("‰ΩøÁî®ÊñπÊ≥ï:")
    print("  python example_usage.py [mode]")
    print()
    print("Ê®°Âºè:")
    print("  detailed  - ËØ¶ÁªÜÊ≠•È™§Ê®°ÂºèÔºàÈªòËÆ§Ôºâ")
    print("  quick     - Âø´ÈÄüÁõëÊéßÊ®°Âºè")
    print("  help      - ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ")
    print()
    print("‰ΩøÁî®ÂâçÂáÜÂ§á:")
    print("  1. Âª∫Á´ã SSH Á´ØÂè£ËΩ¨Âèë:")
    print("     ssh root@device_ip -L 9222:localhost:9222")
    print()
    print("  2. ÂêØÂä® Chrome Ë∞ÉËØïÊ®°Âºè:")
    print("     chrome --remote-debugging-port=9222")
    print()
    print("  3. Âú® chrome://inspect ‰∏≠ÊâìÂºÄ Bot Controller ÁöÑ DevTools")


if __name__ == "__main__":
    # Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
    mode = "detailed"
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
    
    if mode == "help":
        print_usage()
        sys.exit(0)
    elif mode == "quick":
        asyncio.run(quick_monitoring())
    elif mode == "detailed":
        asyncio.run(main())
    else:
        print(f"Êú™Áü•Ê®°Âºè: {mode}")
        print_usage()
        sys.exit(1)